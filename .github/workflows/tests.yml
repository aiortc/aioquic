name: tests

on: [push, pull_request]

jobs:
  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Build documentation
        env:
          READTHEDOCS: "True"
        run: |
          pip install . -r requirements/doc.txt
          make -C docs html SPHINXOPTS=-W

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Install packages
        run: pip install black flake8 isort mypy types-certifi types-cryptography types-pyopenssl
      - name: Run linters
        run: |
          flake8 examples src tests
          isort --check-only --diff examples src tests
          black --check --diff examples src tests
          mypy src tests

  codespell:
    name: Check for spelling errors
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: codespell-project/actions-codespell@master
        with:
          check_filenames: true
          check_hidden: false
          ignore_words_list: quicly

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python:
          - "3.11"
          - "3.10"
          - "3.9"
          - "3.8"
          - "3.7"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Disable firewall
        if: matrix.os == 'macos-latest'
        run: sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off
      - name: Run tests
        run: |
          python -m pip install -U pip setuptools wheel
          pip install coverage
          pip install .
          coverage run -m unittest discover -v
          coverage xml
        shell: bash
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        if: matrix.python != 'pypy3'

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Build source package
        run: |
          pip install wheel
          python setup.py sdist bdist_wheel
      - name: Upload source package and universal wheel
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
